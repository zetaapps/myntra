apply plugin: 'com.android.library'
apply plugin: 'com.fernandocejas.frodo'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    // NOTE: you must uncomment this to use Frodo on myntra engine, but DO NOT commit the change!
    // This flag forces myntra engine to build as debug *regardless of the build selected for the app
    // module!*

    //defaultPublishConfig "debug"
    //defaultPublishConfig "automation"

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "0.1"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
            }
        }
    }

    lintOptions {
        abortOnError false
        lintConfig file("../config/lint/lint.xml")
    }

    publishNonDefault true

    buildTypes {

        automation.initWith(buildTypes.debug)
        automation {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // This allows us see tests execution progress in the output on the CI.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
        //Print the test result summary
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Thunderbird Test Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }

}

dependencies {
    implementation libraries.dagger
    annotationProcessor libraries.daggerCompiler

    implementation libraries.timber

    implementation libraries.zetaUtils
    implementation libraries.zetaEither

    implementation libraries.retrofit
    implementation libraries.retrofitRxAdapter
    implementation libraries.retrofitGsonConverter

    automationImplementation libraries.retrofitMock

    implementation libraries.rxJava
    implementation libraries.rxAndroid

    compileOnly libraries.autoValueJakeWharton
    annotationProcessor libraries.autoValue
    compileOnly libraries.autoValueParcelAdapter
    annotationProcessor libraries.autoValueParcel

    implementation libraries.jsr305
    implementation libraries.javaxAnnotationApi

    testImplementation libraries.junit
    testImplementation libraries.retrofitMock
    testImplementation libraries.mockitoCore

    //power mockito framework for static method mocking
    testImplementation libraries.powerMockitoApi
    testImplementation libraries.powerMockitoJunitRule
    testImplementation libraries.powerMockitoJunit
}

frodo {
    enabled = false
}